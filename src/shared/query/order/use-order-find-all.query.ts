// This file is auto-generated by scripts/openapi-react-query.ts
// Do not edit this file directly.

import { apiClient, fetchClient } from '@/module/core'
import type { operations, components } from '@/shared/types/api'

import { useInfiniteQuery } from "@tanstack/react-query"
import type { FetchOptions } from "openapi-fetch"
import { OpenapiQueryClient } from "openapi-react-query"

export type useOrderFindAllResponse = operations['OrderController_findAll']['responses'][200]['content']['application/json'];

export const useOrderFindAll = (
        fetchOptions?: FetchOptions<operations['OrderController_findAll']>,
        options?: Parameters<OpenapiQueryClient<'get', '/order'>['useQuery']>['3']
      ) => {
    // @ts-ignore
    return apiClient.useQuery('get', '/order' as const, fetchOptions, options)
  }

export const useOrderFindAllInfinite = (
        options?: Parameters<typeof useInfiniteQuery<useOrderFindAllResponse>>[0]
      ) => {
       return useInfiniteQuery<useOrderFindAllResponse>({
    queryKey: ['get', '/order'],
    initialPageParam: 1,
    getNextPageParam: (lastPage) => {
      if (lastPage.page < lastPage.totalPage) {
        return lastPage.page + 1
      }
    },
    queryFn: ({ pageParam = 1 }) => {
      return fetchClient
        .GET('/order', {
          params: { query: { page: Number(pageParam) } },
        })
        .then((res) => res.data as useOrderFindAllResponse)
        .catch((err) => {
          throw err
        })
    },
    ...options
  })
  }
