// This file is auto-generated by scripts/openapi-react-query.ts
// Do not edit this file directly.

import { apiClient } from '@/module/core'
import type { operations } from '@/shared/types/api'
import { FetchOptions } from "openapi-fetch"
import { OpenapiQueryClient } from "openapi-react-query"

export const useAppGetHello = (fetchOptions?: FetchOptions<operations['AppController_getHello']>) => {
    return apiClient.useQuery('get', '/' as const, fetchOptions)
  }

export const useProductsFindAll = (fetchOptions?: FetchOptions<operations['ProductsController_findAll']>) => {
    return apiClient.useQuery('get', '/products' as const, fetchOptions)
  }

export const useProductsCreate = (options?: Parameters<OpenapiQueryClient<'post', '/products'>['useMutation']>['2']) => {
      // @ts-ignore
    return apiClient.useMutation('post', '/products' as const, options)
  }

export const useProductsFindOne = (
        fetchOptions?: FetchOptions<operations['ProductsController_findOne']>,
        options?: Parameters<OpenapiQueryClient<'get', '/products/{id}'>['useQuery']>['3']
      ) => {
    // @ts-ignore
    return apiClient.useQuery('get', '/products/{id}' as const, fetchOptions, options)
  }

export const useProductsRemove = (options?: Parameters<OpenapiQueryClient<'delete', '/products/{id}'>['useMutation']>['2']) => {
      // @ts-ignore
    return apiClient.useMutation('delete', '/products/{id}' as const, options)
  }

export const useProductsUpdate = (options?: Parameters<OpenapiQueryClient<'patch', '/products/{id}'>['useMutation']>['2']) => {
      // @ts-ignore
    return apiClient.useMutation('patch', '/products/{id}' as const, options)
  }

export const useProductsAddVariant = (options?: Parameters<OpenapiQueryClient<'post', '/products/{id}/variants'>['useMutation']>['2']) => {
      // @ts-ignore
    return apiClient.useMutation('post', '/products/{id}/variants' as const, options)
  }

export const useProductsUpdateVariant = (options?: Parameters<OpenapiQueryClient<'put', '/products/variants/{variantId}'>['useMutation']>['2']) => {
      // @ts-ignore
    return apiClient.useMutation('put', '/products/variants/{variantId}' as const, options)
  }

export const useProductCategoryFindAll = (fetchOptions?: FetchOptions<operations['ProductCategoryController_findAll']>) => {
    return apiClient.useQuery('get', '/product-category' as const, fetchOptions)
  }

export const useProductCategoryCreate = (options?: Parameters<OpenapiQueryClient<'post', '/product-category'>['useMutation']>['2']) => {
      // @ts-ignore
    return apiClient.useMutation('post', '/product-category' as const, options)
  }

export const useProductCategoryFindOne = (
        fetchOptions?: FetchOptions<operations['ProductCategoryController_findOne']>,
        options?: Parameters<OpenapiQueryClient<'get', '/product-category/{id}'>['useQuery']>['3']
      ) => {
    // @ts-ignore
    return apiClient.useQuery('get', '/product-category/{id}' as const, fetchOptions, options)
  }

export const useProductCategoryRemove = (options?: Parameters<OpenapiQueryClient<'delete', '/product-category/{id}'>['useMutation']>['2']) => {
      // @ts-ignore
    return apiClient.useMutation('delete', '/product-category/{id}' as const, options)
  }

export const useProductCategoryUpdate = (options?: Parameters<OpenapiQueryClient<'patch', '/product-category/{id}'>['useMutation']>['2']) => {
      // @ts-ignore
    return apiClient.useMutation('patch', '/product-category/{id}' as const, options)
  }

export const useUserFindAll = (fetchOptions?: FetchOptions<operations['UserController_findAll']>) => {
    return apiClient.useQuery('get', '/user' as const, fetchOptions)
  }

export const useUserCreate = (options?: Parameters<OpenapiQueryClient<'post', '/user'>['useMutation']>['2']) => {
      // @ts-ignore
    return apiClient.useMutation('post', '/user' as const, options)
  }

export const useUserGetProfile = (fetchOptions?: FetchOptions<operations['UserController_getProfile']>) => {
    return apiClient.useQuery('get', '/user/profile' as const, fetchOptions)
  }

export const useUserFindOne = (
        fetchOptions?: FetchOptions<operations['UserController_findOne']>,
        options?: Parameters<OpenapiQueryClient<'get', '/user/{id}'>['useQuery']>['3']
      ) => {
    // @ts-ignore
    return apiClient.useQuery('get', '/user/{id}' as const, fetchOptions, options)
  }

export const useUserRemove = (options?: Parameters<OpenapiQueryClient<'delete', '/user/{id}'>['useMutation']>['2']) => {
      // @ts-ignore
    return apiClient.useMutation('delete', '/user/{id}' as const, options)
  }

export const useUserUpdate = (options?: Parameters<OpenapiQueryClient<'patch', '/user/{id}'>['useMutation']>['2']) => {
      // @ts-ignore
    return apiClient.useMutation('patch', '/user/{id}' as const, options)
  }

export const useAuthSignup = (options?: Parameters<OpenapiQueryClient<'post', '/auth/signup'>['useMutation']>['2']) => {
      // @ts-ignore
    return apiClient.useMutation('post', '/auth/signup' as const, options)
  }

export const useAuthLogin = (options?: Parameters<OpenapiQueryClient<'post', '/auth/login'>['useMutation']>['2']) => {
      // @ts-ignore
    return apiClient.useMutation('post', '/auth/login' as const, options)
  }

export const useAuthRefreshToken = (options?: Parameters<OpenapiQueryClient<'post', '/auth/refresh-token'>['useMutation']>['2']) => {
      // @ts-ignore
    return apiClient.useMutation('post', '/auth/refresh-token' as const, options)
  }

export const useOrderFindAll = (fetchOptions?: FetchOptions<operations['OrderController_findAll']>) => {
    return apiClient.useQuery('get', '/order' as const, fetchOptions)
  }

export const useOrderCreate = (options?: Parameters<OpenapiQueryClient<'post', '/order'>['useMutation']>['2']) => {
      // @ts-ignore
    return apiClient.useMutation('post', '/order' as const, options)
  }

export const useOrderFindOne = (
        fetchOptions?: FetchOptions<operations['OrderController_findOne']>,
        options?: Parameters<OpenapiQueryClient<'get', '/order/{id}'>['useQuery']>['3']
      ) => {
    // @ts-ignore
    return apiClient.useQuery('get', '/order/{id}' as const, fetchOptions, options)
  }

export const useOrderRemove = (options?: Parameters<OpenapiQueryClient<'delete', '/order/{id}'>['useMutation']>['2']) => {
      // @ts-ignore
    return apiClient.useMutation('delete', '/order/{id}' as const, options)
  }

export const useOrderUpdate = (options?: Parameters<OpenapiQueryClient<'patch', '/order/{id}'>['useMutation']>['2']) => {
      // @ts-ignore
    return apiClient.useMutation('patch', '/order/{id}' as const, options)
  }

export const useCartGetCart = (fetchOptions?: FetchOptions<operations['CartController_getCart']>) => {
    return apiClient.useQuery('get', '/cart' as const, fetchOptions)
  }

export const useCartClearCart = (options?: Parameters<OpenapiQueryClient<'delete', '/cart'>['useMutation']>['2']) => {
      // @ts-ignore
    return apiClient.useMutation('delete', '/cart' as const, options)
  }

export const useCartAddToCart = (options?: Parameters<OpenapiQueryClient<'post', '/cart/items'>['useMutation']>['2']) => {
      // @ts-ignore
    return apiClient.useMutation('post', '/cart/items' as const, options)
  }

export const useCartRemoveCartItem = (options?: Parameters<OpenapiQueryClient<'delete', '/cart/items/{id}'>['useMutation']>['2']) => {
      // @ts-ignore
    return apiClient.useMutation('delete', '/cart/items/{id}' as const, options)
  }

export const useCartUpdateCartItem = (options?: Parameters<OpenapiQueryClient<'patch', '/cart/items/{id}'>['useMutation']>['2']) => {
      // @ts-ignore
    return apiClient.useMutation('patch', '/cart/items/{id}' as const, options)
  }

export const useCartMergeGuestCart = (options?: Parameters<OpenapiQueryClient<'post', '/cart/merge'>['useMutation']>['2']) => {
      // @ts-ignore
    return apiClient.useMutation('post', '/cart/merge' as const, options)
  }

export const useCartCheckoutCart = (options?: Parameters<OpenapiQueryClient<'post', '/cart/{sessionId}/checkout'>['useMutation']>['2']) => {
      // @ts-ignore
    return apiClient.useMutation('post', '/cart/{sessionId}/checkout' as const, options)
  }

export const usePaymentCreatePayment = (options?: Parameters<OpenapiQueryClient<'post', '/payment'>['useMutation']>['2']) => {
      // @ts-ignore
    return apiClient.useMutation('post', '/payment' as const, options)
  }